{"version":3,"sources":["components/data.jsx","components/modaluser.jsx","modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Date","state","startDate","endDate","flag","date","this","onDateChange","setState","focused","onFocusChange","id","Component","Modaldata","props","updatedlist","map","modaluser","key","style","fontStyle","margin","real_name","padding","className","color","activity_periods","start_time","end_time","modal","data","fetch","then","response","json","users","referenceid","finaluser","filter","includes","opacity","show","position","top","right","onClick","close","App","openModalHandler","koushik","isShowing","name","closeModalHandler","searchField","filteredusers","toLowerCase","toLocaleLowerCase","textAlign","type","placeholder","onChange","e","target","value","tz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9d006ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'react-dates/initialize';\r\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\n\r\n\r\nclass Date extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      startDate:null,\r\n      endDate:null,\r\n      flag:\"\"\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    //   if(this.state.startDate != \"\"){\r\n    //     {this.setState({flag:\"1\"})}\r\n    //   }\r\n    return (<div>\r\n      <SingleDatePicker\r\n    //   isOutsideRange={() => false}\r\n        date={this.state.date} // momentPropTypes.momentObj or null\r\n        onDateChange={date => this.setState({ date })} // PropTypes.func.isRequired\r\n        focused={this.state.focused} // PropTypes.bool\r\n        onFocusChange={({ focused }) => this.setState({ focused })} // PropTypes.func.isRequired\r\n        id=\"your_unique_id\" // PropTypes.string.isRequired,\r\n        />\r\n        {(this.state.date)?<p>You Have No Activities On This Day</p>:<p></p>}\r\n\r\n</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Date;\r\n","import React from \"react\";\r\nimport Date from \"./data\";\r\nfunction Modaldata(props){\r\n    return(\r\n        <div>\r\n            {props.updatedlist.map(modaluser => <div key={modaluser.id}>\r\n            <h1 style={{fontStyle:\"italic\", margin:\"0px\"}}>Welcome {modaluser.real_name}</h1>\r\n            <p style={{margin:\"0px\"}}>Your Id: {modaluser.id}</p>\r\n            <div style={{padding:\"5px\", margin:\"5px\"}}><p>Select Date</p><Date /></div>\r\n            <div >\r\n                <div className=\"time\">\r\n                    <h2 style={{margin:\"0px\",color:'red'}}>Active Time</h2>\r\n                    <h3 className=\"h3\">{modaluser.activity_periods[0].start_time}</h3>\r\n                    <h3 className=\"h3\">{modaluser.activity_periods[1].start_time}</h3>\r\n                    <h3>{modaluser.activity_periods[2].start_time}</h3>\r\n                </div>\r\n                <div className=\"time\">\r\n                    <h2 style={{margin:\"0px\",color:'green'}}>End Time</h2>\r\n                    <h3 className=\"h3\">{modaluser.activity_periods[0].end_time}</h3>\r\n                    <h3 className=\"h3\">{modaluser.activity_periods[1].end_time}</h3>\r\n                    <h3>{modaluser.activity_periods[2].end_time}</h3>\r\n                </div>\r\n            </div>\r\n            </div>)}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modaldata;","import React, {Component} from 'react';\r\nimport Modaldata  from \"./components/modaluser\"\r\nimport './App.css';\r\n\r\n\r\nclass modal extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data: []\r\n        }\r\n    }    \r\n    \r\n    componentDidMount() {\r\n        fetch('https://api.jsonbin.io/b/5e899b238841e979d0fe0284/1')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({data:users}));\r\n      }\r\n   render(){ \r\n       const{data} = this.state;\r\n    const referenceid = this.props.flag;\r\n    // const finaluser = data.filter(data => data.id.includes(referenceid));\r\n    const finaluser = data.filter(data => data.id.includes(referenceid))\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"modal-wrapper\"\r\n                style={{\r\n                    // transform: this.props.show ? 'translateY(-90vh)' : 'translateY(-100vh)',\r\n                    opacity: this.props.show ? '1' : '0',\r\n                    position: this.props.show ? 'fixed' : 'fixed',\r\n                    top: this.props.show ? '0px' : '1000px',\r\n                    right: this.props.show ? '250px' : '1000px'\r\n                }}>\r\n                <div className=\"modal-header\">\r\n                    <h3>Your Activities</h3>\r\n                    <span className=\"close-modal-btn\" onClick={this.props.close}>Ã—</span>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <Modaldata updatedlist={finaluser}/>\r\n                </div>\r\n                \r\n                <div className=\"modal-footer\">\r\n                    <button className=\"btn-cancel\" onClick={this.props.close}>CLOSE</button>\r\n                    {/* <button className=\"btn-continue\">CONTINUE</button> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n            }\r\n}\r\n\r\nexport default modal;","import React, { Component } from 'react';\n\nimport Modal from './modal';\n\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            isShowing: false,\n            name:\"\",\n            data:[],\n            searchField:\"\"\n        }\n    }\n\n    openModalHandler = (koushik) => {\n        this.setState({\n            isShowing: true\n        });\n        this.setState({\n          name:koushik.id\n        });\n        \n    }\n\n    closeModalHandler = () => {\n        this.setState({\n            isShowing: false\n        });\n    }\n    componentDidMount() {\n      fetch('https://api.jsonbin.io/b/5e899b238841e979d0fe0284/1')\n      .then(response => response.json())\n      .then(users => this.setState({data:users}));\n    }\n    render () {\n      const{data, searchField}=this.state;\n    // const filteredusers = data.filter(data => data.name.includes(searchField))  \n    const filteredusers = data.filter(data => data.real_name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n\n        return (\n            <div className=\"container\">\n                { this.state.isShowing ? <div onClick={this.closeModalHandler} className=\"back-drop\"></div> : null }\n                <div style={{textAlign:\"center\"}}>\n                    <h2 className=\"h2\">Welcome!!</h2>\n                    <div className=\"searchdiv\">\n                        <input type=\"text\" placeholder=\"Search Names\" className=\"searchbar\" onChange={e => this.setState({ searchField : e.target.value})}/> \n                    </div>\n                    <div className=\"\">\n                        {filteredusers.map(koushik => <div className=\"card\" key={koushik.id}>\n                            <h1 style={{color:\"white\"}}>{koushik.real_name}</h1>\n                            <p style={{color:\"white\"}}>{koushik.tz}</p>\n                            <div className=\"button\">\n                                <button onClick={()=> this.openModalHandler(koushik)}>Info</button>\n                            </div>    \n                        </div>)}\n                    </div>\n                </div>\n                <Modal\n                    className=\"modal\"\n                    show={this.state.isShowing}\n                    close={this.closeModalHandler}\n                    flag={this.state.name}>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}